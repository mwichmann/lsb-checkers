.TH lsbappchk "1" "" "lsbappchk (LSB)" LSB
.SH NAME
lsbappchk \- check LSB conformance of application or shared library
.SH SYNOPSIS
.B lsbappchk
.RB [ \-o
.IR outputfile ]
.RB [ \-A ]
.RB [ \-M
.IR modulename ]...
.RB [ \-L
.IR pathtolib ]...
.I appname
.br
.B lsbappchk
.RB [ \-o
.IR outputfile ]
.RB [ \-A ]
.RB [ \-M
.IR modulename ]...
.B \-L
.I pathtolib
.SH DESCRIPTION
.PP
In the first form,
measure an application executable's conformance to the Linux Standard
Base (LSB) specification. The object format of the application is
checked, as is the list of shared libraries used by the application,
and the list of functions and global data used by the
application. Warnings are produced for anything that is referenced
but not contained in the LSB specification. 
.PP
In the second form, a shared library is examined without considering
an application that may be linked with it, useful for shared libraries
that may be development targets on their own.
.IR lsbappchk 's
view of valid libraries and interfaces can be expanded.
.TP
\fB\-o \fIoutputfile\fR
Write the journal file (see below) to \fIoutputfile\fR
instead of to the default filename in the current directory.
.TP
\fB\-A
Check the symbols found in all modules.
.TP
\fB\-M \fImodulename\fR
Also check the symbols found in module \fImodulename\fR.
The default module name is LSB-Core. Other choices are
LSB-Graphics and LSB-C++ (module names are not case-sensitive).
.TP
\fB\-L \fInameoflib\fR
Specify the full pathname of a shared library which is part of the application.
This option can be specified as many times as needed, and will prevent 
.I lsbappchk
from complaining about symbols which are provided in those shared
libraries. The order of libraries specified this way is significant:
since 
.I lsbappchk
does not actually run the application, it cannot deduce the
library dependency graph.
.br
This option may also be used if a shared library needs to be
checked standalone.
.PP
A journal file named 
.BI journal.appchk. appname
is created, where 
.I appname
is the binary specified on the command line. It contains a record of
the test results in a format that can be submitted for LSB Certification.
You must have write access to the current working directory
in order to run 
.I lsbappchk
successfully, or use the \fI-o\fR option to
specify an alternate location for the journal.
.PP
The 
.I lsbappchk
program cannot detect all conformance problems.  In particular,
it is a static test and does not actually run the application.  
.I lsbappchk
will not find any behaviors which show themselves only at run\-time
(for example, anything involving the File Hierarchy Standard, or
constants and other such items which are found in header files). 
.I lsbappchk
will warn that it cannot determine the validity of a call to \fIioctl\fR.
The dynamic checker 
.RI ( lsbdynchk )
should be used to test run\-time behavior.
.SH "NOTES"
.I lsbappchk
is intended to be used on applications compiled in LSB mode.
When used as an analysis tool on non-LSB applications, it will 
report false negatives, such as symbols with the wrong symbol
version, which will vanish when the application is compiled correctly.
Recognizing which reports can be ignored requires detailed
knowledge of the LSB and of the libraries in question.
.SH "AUTHORS"
The contributors to the Linux Standard Base.
.SH "REPORTING BUGS"
If you obtained this checker from the LSB ftp site,
report bugs at http://bugs.linuxbase.org or email to
<lsb-test@freestandards.org>.  If you obtained this
from your distribution, report bugs back to the
distribution in the normal way.
.SH "SEE ALSO"
Linux Standard Base specification and other documents at
http://www.linuxbase.org/

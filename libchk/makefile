LSBLIBCHK_VERSION=unofficial
ifndef LSBVERSION
LSBVERSION=$(shell cat LSB_VERSION)
endif

include libs.mk

OBJS = libchk.o libs.o classchk.o lsb_ver.o $(LIBOBJS)

CFLAGS=-g -I../elfchk -I../tetj -DUSE_CXXABI_DEMANGLE -DLSBVERSION=\"$(LSBVERSION)\" -DLSBLIBCHK_VERSION=\"$(LSBLIBCHK_VERSION)\" -Wall

GENSRCS=libs.h libs.c lsb_ver.c

all: libchk dummy_link

include ../Makefile.common

libchk: $(OBJS) ../elfchk/libelfchk.a ../tetj/libtetj.a
	$(CXX) $(CFLAGS) -o libchk $(OBJS) -L../elfchk -L ../tetj -lelfchk -ltetj -lstdc++ -ldl

gensrc: $(GENSRCS)

libs.c:
	./mkfunclist -v `cat ../LSB_VERSIONS`

# libs.h, lsb_ver.c and libs.c are all generated by mkfunclist.
# But we only mention libs.h in the target above to avoid launching
# of several instances of mkfunclist when '-j' option is specified
libs.h lsb_ver.c: libs.c

LSB_LINKER=`./lsb_linker`

LIB64=$(shell case `uname -m` in (ppc64 | s390x | x86_64) echo 64 ;; esac)

# add /opt/lsb/lib or /opt/lsb/lib64
#LSBLIBPATHS=-L/opt/lsb/lib$(LIB64)

# If you want to just link against the normal system libs instead of the
# lsb-dev libs (like for testing against newer libstdcxx) use this instead
#LSBLIBPATHS=-L/usr/X11R6/lib

LSBVERSIONS=31 32 40 41 50
DUMMY_LINKS := $(foreach ver,$(LSBVERSIONS),dummy_link_$(ver))
dummy_link: $(DUMMY_LINKS)

# Construction with 'shell' and 'sed' just insert a dot to version name, i.e. transforms '41' to '4.1'
dummy_link_%: makefile
	LSBCC_LSBVERSION=$(shell echo $* | sed 's/\([[:digit:]]\)/\1./') $(CC) $(CFLAGS) -fno-builtin-acos -c -o $@.o dummy_link_$*.c
	LSB_MODULES=Multimedia,Security,Toolkit_Qt LSBCC_LSBVERSION=$(shell echo $* | sed 's/\([[:digit:]]\)/\1./') $(CXX) -nostdlib -Wl,--dynamic-linker=$(LSB_LINKER) -L/opt/lsb/lib$(LIB64)-$(shell echo $* | sed 's/\([[:digit:]]\)/\1./') $@.o $(LSBLIBRARIES_$(*)) -o $@
	@echo "okay to IGNORE this message: \"cannot find entry symbol _start\" WARNING, dummy_link is not executable"

install:
	install -d $(DESTDIR)$(INSTALL_ROOT)/$(BINDIR)
	install libchk lsblibchk $(DESTDIR)$(INSTALL_ROOT)/$(BINDIR)/
	install $(DUMMY_LINKS) $(DESTDIR)$(INSTALL_ROOT)/$(BINDIR)/
	install -d $(DESTDIR)$(INSTALL_ROOT)/$(MANDIR)/man1/
	install lsblibchk.1 $(DESTDIR)$(INSTALL_ROOT)/$(MANDIR)/man1/lsblibchk.1

test: libchk dummy_link
	./test_libchk

dumpints: dumpints.o libstdcxx_so_5.o

# Distclean means will need database to rebuild
distclean: clean
	rm -f $(GENSRCS) $(LIBSRCS)

clean:
	rm -f $(OBJS) libchk $(foreach ver,$(LSBVERSIONS),dummy_link_$(ver)) dummy_link*.o

.PHONY: clean distclean install test


#!/usr/bin/perl

use CGI;
use DBI;
use Getopt::Long;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
    print STDERR "Usage: mkfunclist -v <lsbversion>\n";
die;
}

GetOptions("v=s" => \$lsbversion);
if( !$lsbversion ) { usage(); }

# Uncomment to trace SQL statments
#$trace=1;

sub getinterfacename($)
{
	local($Iid)=@_;
	my($select,$entry);

	if( $Iid eq "" ) {return "";}

	if( $intname[$Iid] ) { return $intname[$Iid]; }

	#print STDERR "Looking for Iname for $Iid\n";

	$select = "SELECT Iname FROM Interface ";
	$select.= "WHERE Iid=$Iid";
	$isth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$isth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	$entry = $isth->fetchrow_hashref ;
	$isth->finish;
	$intname[$Iid] = $entry->{'Iname'};
	return $entry->{'Iname'};
}

sub getinterfacevisibility($)
{
	local($Iid)=@_;
	my($select,%entry);

	if( $Iid eq "" ) {return "";}

	if( $intvisibility[$Iid] ) { return $intvisibility[$Iid]; }

	$select = "SELECT Isrcbin FROM Interface ";
	$select.= "WHERE Iid=$Iid";
	$isth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$isth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	$entry = $isth->fetchrow_hashref ;
	$isth->finish;
	$intvisibility[$Iid] = $entry->{'Isrcbin'};
	return $entry->{'Isrcbin'};
}

sub mkclassinfo($$$)
{
local($LIB,$libname,$class)=@_;
my($select,$entry);

$classbase=$class->{'CIname'};
$classbase=~s/_Z//;

# This check is not a good idea - Qt3 and Qt4 have a lot of similar classes
# if( $seenclass{$classbase} ) {
# 	die "Already seen $classbase\n";
# 	}
#$seenclass{$classbase}=1;

#
# Output array of BaseTypes entries
#
$typeinfoname="_".$classbase."_of_".$libname."_typeinfo";

$select = "SELECT * FROM BaseTypes ";
$select.= "WHERE BTcid=".$class->{'CIid'}." ";
$select.= "ORDER BY BTpos";

#print $select;

print $LIB "char *".$typeinfoname."_name[] = {\n";
$vsth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$vsth->execute or die "Couldn't execute $select query: ".DBI->errstr;
$numtypeinfofuns=0;
if( $class->{'CInumbasetype'} == '1' ) {
	$entry = $vsth->fetchrow_hashref;
	print $LIB "\t\"".getinterfacename($entry->{'BTbasetype'})."\",\n";
	$numtypeinfofuns++;
}
$vsth->finish;
print $LIB "\t};\n\n";

#
# Output typeinfo here.
#
print $LIB "struct classtypeinfo $typeinfoname = {\n";
print $LIB "\t\"".getinterfacename($class->{'CIbasevtable'})."\",\n";
print $LIB "\t\"_ZTS".$classbase."\",\n";
print $LIB "\t".$typeinfoname."_name,\n";
print $LIB "\t};\n\n";

foreach my $pos ( 0..$class->{'CInumvtab'}-1) {
#
# Output array of Vtable entries
#
$vtablename="_".$classbase."_of_".$libname."_vtable";

$select = "SELECT Vtable.*,Architecture.*,Interface.Iid,Interface.Iname,ArchInt.AIarch FROM Vtable ";
$select.= "LEFT JOIN Architecture ON Aid=VTarch ";
$select.= "LEFT JOIN Interface ON Iid=VTviid ";
$select.= "LEFT JOIN ArchInt ON Iid=AIint ";
$select.= "WHERE VTcid=".$class->{'CIid'}." ";
$select.= "AND VTvtpos=$pos ";
$select.= "AND (AIarch IS NOT NULL OR Iname IS NULL) "; # Iname here looks like a hack...
# $select.= "AND AIarch = VTarch ";
$select.= "ORDER BY VTpos";

print $LIB "const char *".$vtablename."_name_$pos [] = {\n";
$vsth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$vsth->execute or die "Couldn't execute $select query: ".DBI->errstr;
for(1..$vsth->rows) {
	$entry = $vsth->fetchrow_hashref;
	if( $entry->{'VTarch'} != $entry->{'AIarch'} ) {
	    # it's an arch mismatch only if the second join above worked...
	    if( $entry->{'Iname'} eq "" ) {
			print STDERR "Interface ".$entry->{'VTviid'}." referenced by ";
			print STDERR "vtable for class ".$entry->{'VTcid'}." missing\n";
	    }
		else {
		#   This is a normal situation, since one entry from Interface table can be assigned to more
		#   than one architecture. Maybe it would be better to correct the 'select' above
		#	print STDERR "Arch mismatch for class ".$entry->{'VTcid'}.":".$entry->{'VTarch'}."!=".$entry->{'AIarch'};
		#	print STDERR ":".$entry->{'Iname'}."(".$entry->{'VTviid'}.")\n";
			next;
	    }
	}
	if( $entry->{'Aname'} eq "All" ) {
		if( $entry->{'Iid'} ) {
			$selectNotGeneric = "SELECT AIarch FROM ArchInt ";
			$selectNotGeneric.= "WHERE AIint=$entry->{'Iid'} AND AIarch > 1";
			$sthNotGeneric = $dbh->prepare($selectNotGeneric)
			    or die "Couldn't prepare $selectNotGeneric query: ".DBI->errstr;
			$sthNotGeneric->execute or die "Couldn't execute $selectNotGeneric query: ".DBI->errstr;

			# Some architecture specific records found - don't check generic information
			if( $sthNotGeneric->rows ) {
				$sthNotGeneric->finish;
				next;
			}
			$sthNotGeneric->finish;
		}
 		$visibility = getinterfacevisibility($entry->{'VTviid'});
 		if( $visibility eq "SrcOnly" ) {
 		    print $LIB "\t\"NULL or ".getinterfacename($entry->{'VTviid'})."\",\n";
 		}
 		else {
			print $LIB "\t\"".getinterfacename($entry->{'VTviid'})."\",\n";
		}
	} else {
		print $LIB "#if ".$entry->{'Asymbol'}."\n";

 		$visibility = getinterfacevisibility($entry->{'VTviid'});
 		if( $visibility eq "SrcOnly" ) {
 		    print $LIB "\t\"NULL or ".getinterfacename($entry->{'VTviid'})."\",\n";
 		}
 		else {
			print $LIB "\t\"".getinterfacename($entry->{'VTviid'})."\",\n";
		}

		print $LIB "#endif\n";
	}
}
$vsth->finish;
print $LIB "\t};\n\n";

} # $$class{'CInumvtab'}

#
# Output classvtable here.
#
print $LIB "struct classvtable $vtablename [".$class->{'CInumvtab'}."] = {\n";

foreach my $pos ( 0..$class->{'CInumvtab'}-1) {
print $LIB "\t{\n";

#vcall offsets are architecture sensitive
$select = "SELECT * FROM ClassVtab ";
$select.= "LEFT JOIN ArchClass ON CVpos=ACpos AND CVcid=ACcid ";
$select.= "LEFT JOIN Architecture ON Aid=ACaid ";
$select.= "WHERE ACcid=".$class->{'CIid'}." ";
$select.= "AND CVpos=$pos ";
$vsth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$vsth->execute or die "Couldn't execute $select query: ".DBI->errstr;
die "No ClassVtabs for ".$class->{'CIid'}." at position $pos\n" if( $vsth->rows == 0 );
$category=0;
$rttiid=0;
for(1..$vsth->rows) {
	$entry = $vsth->fetchrow_hashref;
	if( $entry->{'Aname'} eq "All" ) {
		if( $vsth->rows != 1 ) {
			printf STDERR "vcall offset for All, but more than one entry: ".$class->{'CIname'}."\n";
		}
		print $LIB "\t".$entry->{'ACvoffset'}.",\n";
		print $LIB "\t".$entry->{'ACbaseoffset'}.",\n";
	} else {
		print $LIB "#if ".$entry->{'Asymbol'}."\n";
		print $LIB "\t".$entry->{'ACvoffset'}.",\n";
		print $LIB "\t".$entry->{'ACbaseoffset'}.",\n";
		print $LIB "#endif\n";
	}
	$category=$entry->{'CVclass'};
	$rttiid=$entry->{'CVrtti'};
}
$vsth->finish;

print $LIB "\t".$category.",\t/* Vtable category */\n";
print $LIB "\t".$entry->{'CVnumvtfuncs'}.",\t/* Number of Vfuncs */\n";
print $LIB "\t\"".getinterfacename($rttiid)."\",\n";
print $LIB "\t".$vtablename."_name_$pos,\n";
print $LIB "\t},\n";

} # $$class{'CInumvtab'}
print $LIB "};\n\n";

#
# Output base info type here.
#
$baseinfoname="_".$classbase."_of_".$libname."_baseinfo";

$select = "SELECT * FROM VMIBaseTypes ";
$select.= "LEFT JOIN Architecture ON Aid=VBTaid ";
$select.= "WHERE VBTcid=".$class->{'CIid'}." ";
$select.= "ORDER BY VBTpos";

#print $select;

print $LIB "struct base_type_info ".$baseinfoname."[] = {\n";
$vsth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$vsth->execute or die "Couldn't execute $select query: ".DBI->errstr;
for(1..$vsth->rows) {
	$entry = $vsth->fetchrow_hashref;
	if (not $entry->{'Aname'}) {
		next; # unsupported architecture found
	}

	if( $entry->{'Aname'} eq "All" ) {
		print $LIB "\t{\"".getinterfacename($entry->{'VBTbasetype'})."\",";
		print $LIB "\t".$entry->{'VBTflags'}."U},\n";
	} else {
		print $LIB "#if ".$entry->{'Asymbol'}."\n";
		print $LIB "\t{\"".getinterfacename($entry->{'VBTbasetype'})."\",";
		print $LIB "\t".$entry->{'VBTflags'}."U},\n";
		print $LIB "#endif\n";
	}
}
$vsth->finish;
print $LIB "\t};\n\n";

print $LIB "struct classinfo ".$class->{'CIname'}."_of_".$libname."_classinfo = {\n";
print $LIB "\t\"".$class->{'CIname'}."\",\n";
print $LIB "\t\"".getinterfacename($class->{'CIvtable'})."\",\n";
print $LIB "\t\"".getinterfacename($class->{'CIrtti'})."\",\t/* RTTI */\n";
print $LIB "\t\"".getinterfacename($class->{'CIbase'})."\",\n";
print $LIB "\t\"_ZTT".$classbase."\",\t/* VTT */\n";
print $LIB "\t".$class->{'CInumvtab'}.",\n";
print $LIB "\t$numtypeinfofuns,\n";
print $LIB "\t".$class->{'CInumvmitypes'}.",\n";
print $LIB "\t".$class->{'CInumvtt'}.",\t/* numVTT */\n";
print $LIB "\t".$class->{'CIflags'}."U,\n";
print $LIB "\t&$typeinfoname,\n";
print $LIB "\t$vtablename,\n";
print $LIB "\t$baseinfoname,\n";
print $LIB "\t};\n\n";
}

sub createTmpTables()
{
	$create = "CREATE TEMPORARY TABLE tmp_IncludedInts_$lsbversion ";
	$create.= "(KEY `Lid`(`Lid`,`Iid`), KEY`Iid`(`Iid`,`AIarch`)) "; 
	$create.= "SELECT Iid, Iname, Itype, Ireturn, AIarch, AIversion, LGlib AS Lid FROM Interface ";
	$create.= "LEFT JOIN ArchInt ON AIint=Iid ";
	$create.= "LEFT JOIN LGInt on LGIint=AIint ";
	$create.= "LEFT JOIN LibGroup ON LGid=LGIlibg ";
	$create.= "WHERE AIappearedin <= '$lsbversion' AND AIappearedin >'' ";
	$create.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin >'$lsbversion') ";
	$dbh->do($create) or die "Couldn't execute $create query: ".DBI->errstr;
}

sub mklibsyms($$)
{
local($libname,$lid)=@_;

$select = "SELECT * FROM tmp_IncludedInts_$lsbversion ";
$select.= "LEFT JOIN Architecture ON Aid=AIarch ";
$select.= "LEFT JOIN Version ON Vid=AIversion ";
$select.= "LEFT JOIN ArchType ON ATtid=Ireturn AND ATaid=Aid ";
$select.= "LEFT JOIN ModLib ON MLlid=Lid ";
$select.= "LEFT JOIN SubModule ON MLmid=SMid ";
$select.= "WHERE Lid=$lid ";
$select.= "GROUP BY Iid,AIarch ";
$select.= "ORDER BY Iname,Aid ";
#print $select;

$lsth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$lsth->execute or die "Couldn't execute $select query: ".DBI->errstr;

open(LIB,">$libname.c");
open(TXT,">$libname.txt");
print LIB "#include <stdlib.h>\n";
print LIB "#include \"elfchk.h\"\n";
print LIB "struct versym ".$libname."[] = {\n";

$numsyms=0;
$lastname="";
for(1..$lsth->rows) {
	$entry = $lsth->fetchrow_hashref;
	if( $entry->{'Iname'} ne $lastname ) {
		$numsyms++;
		$lastname=$entry->{'Iname'};
		}
	if( $entry->{'ATsize'} eq "" ) { $entry->{'ATsize'}=0;}
	if( $entry->{'Aid'} && $entry->{'Aname'} ne 'All' ) {
		print LIB "#if $entry->{'Asymbol'}\n";
		printf LIB "\t{\"%s\",\"%s\",",$entry->{'Iname'},$entry->{'Vname'};
		printf LIB "0,%s,%s,",$entry->{'SMname'},$entry->{'ATsize'};
		if( $entry->{'Itype'} eq "Data" ) {
			print LIB "0";
		} else {
			print LIB "1";
		}
		printf LIB "},\n";
		print LIB "#endif\n";
	} else {
		if( $entry->{'Aid'} && $entry->{'Aname'} eq 'All' ) {
			if( $entry->{'Iid'} ) {
				$selectNotGeneric = "SELECT Iid FROM tmp_IncludedInts_$lsbversion ";
				$selectNotGeneric.= "WHERE Iid=".$entry->{'Iid'}." AND AIarch > 1";
# 				$selectNotGeneric = "SELECT AIarch FROM ArchInt ";
# 				$selectNotGeneric.= "WHERE AIint=$entry->{'Iid'} AND AIarch<>1";
				$sthNotGeneric = $dbh->prepare($selectNotGeneric)
				    or die "Couldn't prepare $selectNotGeneric query: ".DBI->errstr;
				$sthNotGeneric->execute or die "Couldn't execute $selectNotGeneric query: ".DBI->errstr;

				# Some architecture specific records found - don't check generic information
                    		if ($sthNotGeneric->rows) {
					$sthNotGeneric->finish;
					next;
				}
				$sthNotGeneric->finish;
			}
		}

		if( $entry->{'ATsize'} == 0 and $entry->{'Itype'} eq "Data" and $entry->{'Aname'} eq "All" and $entry->{'ATtid'} > 0 ) {
			# Generic data symbol found; the size can be arch specific
			$selectArchRetSize = "SELECT Asymbol, ATaid, ATsize FROM ArchType ";
			$selectArchRetSize.= "JOIN Architecture ON ATaid=Aid ";
			$selectArchRetSize.= "WHERE ATaid>1 AND ATtid=".$entry->{'ATtid'};
			$sthArchRetSize = $dbh->prepare($selectArchRetSize);
			$sthArchRetSize->execute or die "Can't execute $selectArchRetSize query: ".DBI->errstr;
			if( $sthArchRetSize->rows ) {
				if( $sthArchRetSize->rows < 7 ) {
					print STDERR "WARNING: Found only ".$sthArchRetSize->rows." records when looking for arch-specific size of generic interface '".$entry->{'Iname'}."' (7 records expected)\n";
				}

				for(1..$sthArchRetSize->rows) {
					$entryArchRetSize = $sthArchRetSize->fetchrow_hashref;
					print LIB "#if ".$entryArchRetSize->{'Asymbol'}."\n";
					print LIB "\t{\"".$entry->{'Iname'}."\",\"".$entry->{'Vname'}."\",";
					print LIB "0,".$entry->{'SMname'}.",".$entryArchRetSize->{'ATsize'}.",0},\n";
					print LIB "#endif\n";
				}
				
				if( $sthArchRetSize->rows == 7 ) {
					# If less then 7 records are found, then checks are printed not for all architectures
					# Let's print in this case generic check, too, with zero size (this means that the size
					# is not actually checked).
					# (Surely, such situation should be considered as lack of data in the db
					# and corrected as soon as possible)
					# If everything is ok, generic check is not required and we may proceed to next symbol
					print TXT $entry->{'Iname'}."\n";
					$sthArchRetSize->finish;
					next;
				}
			}
			$sthArchRetSize->finish;
		}
		printf LIB "\t{\"%s\",\"%s\",",$entry->{'Iname'},$entry->{'Vname'};
		printf LIB "0,%s,%s,",$entry->{'SMname'},$entry->{'ATsize'};
		if( $entry->{'Itype'} eq "Data" ) {
			print LIB "0";
		} else {
			print LIB "1";
		}
		printf LIB "},\n";
		printf TXT $entry->{'Iname'}."\n";
	}
}
$lsth->finish;

print LIB "\t{0,0}};\n\n";

print "$numsyms symbols\n";

#
# Now, look for class data that may be present
#
$select = "SELECT * FROM ClassInfo ";
$select.= "LEFT JOIN ArchClass ON ACcid=CIid ";
$select.= "LEFT JOIN LibGroup ON LibGroup.LGid=CIlibg ";
$select.= "LEFT JOIN Library ON LibGroup.LGLIB=Library.Lid ";
$select.= "WHERE Library.Lid=$lid ";
$select.= "AND ACappearedin > '' AND ACappearedin <= '$lsbversion' ";
$select.= "AND (ACwithdrawnin IS NULL OR ACwithdrawnin > '$lsbversion') ";
$select.= "AND CInumvtab > 0 ";
$select.= "GROUP BY ACcid";
#$select.= "AND CIname LIKE '_ZSd'";

#print $select."\n";

$lsth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$lsth->execute or die "Couldn't execute $select query: ".DBI->errstr;
$classinfos="";
for(1..$lsth->rows) {
	$entry = $lsth->fetchrow_hashref;
	$CIname = $entry->{'CIname'};
	#print $_.":".$entry->{'CIname'}."\n";
	mkclassinfo(LIB,$libname,$entry);
	$classinfos.=$classinfo."\t&".$CIname."_of_".$libname."_classinfo,\n";
}
$lsth->finish;

print LIB "struct classinfo *".$libname."_classinfo[] = {\n";
print LIB $classinfos."\n\tNULL\t};\n";

close(TXT);
close(LIB);
}

#
# 2) Establish connection to the database
#

$dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

#
# 3) Get the list of libs, and process them
#

open(LSB_VER, ">lsb_ver.c");
print LSB_VER "char* LSB_Version_str = \"$lsbversion\";\n";
close(LSB_VER);

open(LIBS,">libs.c");
print LIBS "/* Generated file */\n";
print LIBS "#include <unistd.h>\n";
print LIBS "#include \"libs.h\"\n";
print LIBS "#include \"libchk.h\"\n\n";
print LIBS "#include \"../tetj/tetj.h\"\n\n";

print LIBS "struct modlib modlibs [] = {\n";

open(LIBSH,">libs.h");
print LIBSH "/* Generated file */\n";
print LIBSH "#include \"../elfchk/elfchk.h\"\n\n";

open(MAKE,">libs.mk");
print MAKE "# Generated file #\n";
print MAKE "LIBOBJS = \\\n";

createTmpTables();

$select = "SELECT DISTINCT SMname,ALlid AS Lid,ALrunname,Asymbol,Aname FROM SubModule ";
$select.= "LEFT JOIN ModLib ON MLmid=SMid ";
$select.= "LEFT JOIN ArchLib ON ALlid=MLlid ";
$select.= "LEFT JOIN Architecture ON ALaid=Aid ";
$select.= "WHERE ALappearedin <= '$lsbversion' AND ALappearedin > '' ";
$select.= "AND (ALwithdrawnin IS NULL OR ALwithdrawnin > '$lsbversion') ";
$select.= "AND MLappearedin <= '$lsbversion' AND MLappearedin > '' ";
$select.= "AND (MLwithdrawnin IS NULL OR MLwithdrawnin > '$lsbversion') ";
#$select.= "AND Lname='libstdcxx' ";
$select.= "ORDER BY ALrunname,Aid DESC ";

#print "$select\n";

$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

for(1..$sth->rows) {
	$entry = $sth->fetchrow_hashref;
	if( !$entry->{'ALrunname'} ) {
		next;
		}
	$modname=$entry->{'SMname'};
	$libname=$entry->{'ALrunname'};
	$asym=$entry->{'Asymbol'};
	$libname =~ s/\./_/g;
	$libname =~ s/-/_/g;
	$libname =~ s/\+/x/g;
	#$libname =~ s/\//_/g;
	@libname = split('/',$libname);
	$libname = pop(@libname);
	if( $asym != "1" ) {
		print LIBS "#if $asym\n";
		print LIBS "\t{$modname,\"".$entry->{'ALrunname'}."\",$libname,".$libname."_classinfo},\n";
		print LIBS "#endif\n";
		print LIBSH "#if $asym\n";
		print LIBSH "extern struct versym ".$libname."[];\n";
		print LIBSH "extern struct classinfo ".$libname."_classinfo[];\n";
		print LIBSH "#endif\n";
	} else {
		if( !$seenit{$libname} ) {
			print LIBS "\t{$modname,\"".$entry->{'ALrunname'}."\",$libname,".$libname."_classinfo},\n";
			print LIBSH "extern struct versym ".$libname."[];\n";
			print LIBSH "extern struct classinfo ".$libname."_classinfo[];\n";
			}
	}
	if( !$seenit{$libname} ) {
		print MAKE "\t$libname.o \\\n";
		$seenit{$libname}=1;
		print "Making $libname\n";
		mklibsyms($libname,$entry->{'Lid'});
		}
}
$sth->finish;

print LIBS "{0,NULL,NULL,NULL}\n";
print LIBS "};\n";
close(LIBS);
close(LIBH);
close(MAKE);

$dbh->disconnect;

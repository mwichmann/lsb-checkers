#!/usr/bin/perl

use CGI;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mkfunclist -a <archname>\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

sub getinterfacename($)
{
local($Iid)=@_;
my($select,%entry);

if( $Iid eq "" ) {return "";}

#print STDERR "Looking for Iname for $Iid\n";

$select = "SELECT Iname FROM Interface ";
$select.= "WHERE Iid=$Iid";
$isth = $Dbh->query($select) || die $Dbh->errmsg();
%entry=$isth->fetchhash;
return $entry{'Iname'};
}

sub mkclassinfo($$)
{
local($LIB,$class)=@_;
my($select,%entry);

#
# Output typeinfo here.
#
$typeinfoname=$$class{'CIname'}."_typeinfo";
$numtypeinfofuns=0;
print $LIB "struct classtypeinfo $typeinfoname = {\n";
print $LIB "\t\"".getinterfacename($$class{'CIbasevtable'})."\",\n";
print $LIB "\t\"_ZTS".$$class{'CIname'}."\",\n";
print $LIB "\tNULL,\n";
print $LIB "\t};\n\n";

#
# Output array of Vtable entries
#
$vtablename=$$class{'CIname'}."_vtable";

$select = "SELECT * FROM Vtable ";
$select.= "WHERE VTtid=".$$class{'CIvtable'}." ";
$select.= "ORDER BY VTpos";

#print $select;

print $LIB "char *".$vtablename."_name[] = {\n";
$vsth = $Dbh->query($select) || die $Dbh->errmsg();
for(1..$vsth->numrows) {
	%entry=$vsth->fetchhash;
	print $LIB "\t\"".getinterfacename($entry{'VTviid'})."\",\n";
	$numvtablefuns++;
}
print $LIB "\t};\n\n";

#
# Output classvtable here.
#
$numvtablefuns=0;
print $LIB "struct classvtable $vtablename = {\n";
print $LIB "\t".$$class{'CIbaseoffset'}.",\n";
print $LIB "\t\"_ZTI".$$class{'CIname'}."\",\n";
print $LIB $vtablename."_name,\n";
print $LIB "\t};\n";

print $LIB "struct classinfo ".$$class{'CIname'}."_classinfo = {\n";
print $LIB "\t\"".$$class{'CIname'}."\",\n";
print $LIB "\t\"_ZTV".$$class{'CIname'}."\",\n";
print $LIB "\t\"_ZTI".$$class{'CIname'}."\",\n";
print $LIB "\t$numvtablefuns,\n";
print $LIB "\t$numtypeinfofuns,\n";
print $LIB "\t&$typeinfoname,\n";
print $LIB "\t&$vtablename,\n";
print $LIB "\t};\n\n";
}

sub mklibsyms($$)
{
local($libname,$lid)=@_;

$select = "SELECT DISTINCT * FROM Interface,LibGroup,LGInt ";
$select.= "LEFT JOIN ArchInt ON AIint=Iid ";
$select.= "LEFT JOIN Architecture ON Aid=AIarch ";
$select.= "LEFT JOIN Version ON Vid=AIversion ";
$select.= "WHERE Interface.Iid=LGInt.LGIint ";
$select.= "AND LGInt.LGIlibg=LibGroup.LGid ";
$select.= "AND LibGroup.LGlib=$lid ";
$select.= "AND ( Istatus='Included' OR Istatus='Deprecated' ) ";
$select.= "ORDER BY Iname,Aid ";

#print $select;

$lsth = $Dbh->query($select) || die $Dbh->errmsg();

open(LIB,">$libname.c");
print LIB "#include <stdlib.h>\n";
print LIB "#include \"elfchk.h\"\n";
print LIB "struct versym ".$libname."[] = {\n";
for(1..$lsth->numrows) {
	%entry=$lsth->fetchhash;
	if( $entry{'Aid'} && $entry{'Aname'} ne 'All' ) {
		print LIB "#if $entry{'Asymbol'}\n";
		printf LIB "\t{\"%s\",\"%s\"},\n",$entry{'Iname'},$entry{'Vname'};
		print LIB "#endif\n";
	} else {
		printf LIB "\t{\"%s\",\"%s\"},\n",$entry{'Iname'},$entry{'Vname'};
		}
}
print LIB "\t{0,0}};\n\n";

#
# Now, look for class data that me be present
#
$select = "SELECT DISTINCT * FROM ClassInfo ";
$select.= "LEFT JOIN LibGroup ON LibGroup.LGid=CIlibg ";
$select.= "LEFT JOIN Library ON LibGroup.LGLIB=Library.Lid ";
$select.= "WHERE Library.Lid=$lid ";

#print $select;

$lsth = $Dbh->query($select) || die $Dbh->errmsg();
$classinfos="";
for(1..$lsth->numrows) {
	%entry=$lsth->fetchhash;
	print $entry{'CIname'}."\n";
	mkclassinfo(LIB,\%entry);
	$classinfos.=$classinfo."\t&".$entry{'CIname'}."_classinfo,\n";
}

print LIB "struct classinfo *".$libname."_classinfo[] = {\n";
print LIB $classinfos."\n\tNULL\t};\n";

close(LIB);
}

#
# 2) Establish connection to the database
#

$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER, $LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) Get the list of libs, and process them
#

open(LIBS,">libs.c");
print LIBS "/* Generated file */\n";
print LIBS "#include <unistd.h>\n";
print LIBS "#include \"libs.h\"\n";
print LIBS "#include \"libchk.h\"\n\n";
print LIBS "#include \"../tetj/tetj.h\"\n\n";

print LIBS "void check_libs(struct tetj_handle *journal)\n{\n";

open(LIBSH,">libs.h");
print LIBSH "/* Generated file */\n";
print LIBSH "#include \"../elfchk/elfchk.h\"\n\n";

open(MAKE,">libs.mk");
print MAKE "# Generated file #\n";
print MAKE "LIBOBJS = \\\n";

$select = "SELECT DISTINCT Lid,ALrunname,Asymbol,Aname FROM Library ";
$select.= "LEFT JOIN ArchLib ON ALlid=Lid ";
$select.= "LEFT JOIN Architecture ON ALaid=Aid ";
$select.= "WHERE Lstd='Yes' ";
$select.= "AND Aname!='None' ";
#$select.= "AND Lname='libstdcxx' ";
$select.= "ORDER BY ALrunname,Aid ";

#print $select;

$sth = $Dbh->query($select) || die $Dbh->errmsg();

for(1..$sth->numrows) {
	%entry=$sth->fetchhash;
	if( !$entry{'ALrunname'} ) {
		next;
		}
	$libname=$entry{'ALrunname'};
	$asym=$entry{'Asymbol'};
	$libname =~ s/\./_/g;
	$libname =~ s/-/_/g;
	$libname =~ s/\+/x/g;
	#$libname =~ s/\//_/g;
	@libname = split('/',$libname);
	$libname = pop(@libname);
	if( $asym != "1" ) {
		print LIBS "#if $asym\n";
		print LIBS "check_lib(\"".$entry{'ALrunname'}."\",$libname,".$libname."_classinfo,journal);\n";
		print LIBS "#endif\n";
		print LIBSH "#if $asym\n";
		print LIBSH "extern struct versym ".$libname."[];\n";
		print LIBSH "extern struct classinfo ".$libname."_classinfo[];\n";
		print LIBSH "#endif\n";
	} else {
		print LIBS "check_lib(\"".$entry{'ALrunname'}."\",$libname,".$libname."_classinfo,journal);\n";
		print LIBSH "extern struct versym ".$libname."[];\n";
		print LIBSH "extern struct classinfo ".$libname."_classinfo[];\n";
	}
	if( !$seenit{$libname} ) {
		print MAKE "\t$libname.o \\\n";
		$seenit{$libname}=1;
		}
	mklibsyms($libname,$entry{'Lid'});
}

print LIBS "}\n";
close(LIBS);
close(LIBH);
close(MAKE);


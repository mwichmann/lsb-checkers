#!/usr/bin/perl

use CGI;
use Mysql;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "mkfunclist -a <archname>\n";
die;
}

# Uncomment to trace SQL statments
#$trace=1;

sub mklibsyms($$)
{
local($libname,$lid)=@_;

$select = "SELECT DISTINCT Iname,Vname FROM Interface,LibGroup,LGInt ";
$select.= "LEFT JOIN Version ON Vid=Iversion ";
$select.= "WHERE Interface.Iid=LGInt.LGIint ";
$select.= "AND LGInt.LGIlibg=LibGroup.LGid ";
$select.= "AND LibGroup.LGlib=$lid ";
$select.= "ORDER BY Iname ";

#print $select;

$lsth = $Dbh->query($select) || die $Dbh->errmsg();

open(LIB,">$libname.c");
print LIB "#include \"elfchk.h\"\n";
print LIB "struct versym ".$libname."[] = {\n";
for(1..$lsth->numrows) {
	%entry=$lsth->fetchhash;
	printf LIB "\t{\"%s\",\"%s\"},\n",$entry{'Iname'},$entry{'Vname'};
}
print LIB "\t{0,0}};\n";
close(LIB);
}

#
# 2) Establish connection to the database
#

$Dbh = Mysql->connect($LSBDBHOST,$LSBDB,$LSBUSER, $LSBDBPASSWD) || die $Mysql::db_errstr;

#
# 3) Get the list of libs, and process tem
#

open(LIBS,">libs.c");
print LIBS "/* Generated file */\n";
print LIBS "#include \"libs.h\"\n\n";
print LIBS "#include \"../tetj/tetj.h\"\n\n";
print LIBS "extern void check_lib(char *libname, struct versym entries[], struct tetj_handle *journal);\n";

print LIBS "void check_libs(struct tetj_handle *journal)\n{\n";

open(LIBSH,">libs.h");
print LIBSH "/* Generated file */\n";
print LIBSH "#include \"../elfchk/elfchk.h\"\n\n";

open(MAKE,">libs.mk");
print MAKE "# Generated file #\n";
print MAKE "LIBOBJS = \\\n";

$select = "SELECT DISTINCT Lid,Lrunname,Asymbol FROM Library ";
$select.= "LEFT JOIN Architecture ON Larch=Aid ";
$select.= "WHERE Lstd='Yes' ";
#$select.= "AND Larch IN ($Aid,$AllAid) ";
$select.= "ORDER BY Lrunname ";

#print $select;

$sth = $Dbh->query($select) || die $Dbh->errmsg();

for(1..$sth->numrows) {
	%entry=$sth->fetchhash;
	$libname=$entry{'Lrunname'};
	$asym=$entry{'Asymbol'};
	$libname =~ s/\./_/g;
	$libname =~ s/-/_/g;
	#$libname =~ s/\//_/g;
	@libname = split('/',$libname);
	$libname = pop(@libname);
	if( $asym != "1" ) {
		print LIBS "#if defined($asym)\n";
		print LIBS "check_lib(\"".$entry{'Lrunname'}."\",$libname, journal);\n";
		print LIBS "#endif\n";
		print LIBSH "#if defined($asym)\n";
		print LIBSH "extern struct versym ".$libname."[];\n";
		print LIBSH "#endif\n";
	} else {
		print LIBS "check_lib(\"".$entry{'Lrunname'}."\",$libname,journal);\n";
		print LIBSH "extern struct versym ".$libname."[];\n";
	}
	print MAKE "\t$libname.o \\\n";
	mklibsyms($libname,$entry{'Lid'});
}

print LIBS "}\n";
close(LIBS);
close(LIBH);
close(MAKE);

#!/usr/bin/perl

use CGI;
use DBI;
use Getopt::Long;

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

sub usage()
{
print STDERR "Usage: mkdyntags -v <lsbversion(s)>\n";
print STDERR "    LSB versions should be comma-separated.\n";
die;
}

GetOptions("v=s" => \$lsbversion);
if( !$lsbversion ) { usage(); }

my $dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

print "/* Generated file - Do Not Edit */\n";
print "#include <stdio.h>\n";
print "#include \"elfchk.h\"\n";
print "#include \"dynamic.h\"\n\n";

@lsbversions = sort split(/,/, $lsbversion);
@lsbvernames = @lsbversions;
for ($i = 0; $i <= $#lsbvernames; $i++) {
	$lsbvernames[$i] =~ s/\.//g;
}

foreach $ver (@lsbversions) {
	$select = "SELECT DISTINCT * FROM DynamicEntries ";
	$select.= "LEFT JOIN ArchDE ON ADEdeid=DEid ";
	$select.= "LEFT JOIN Architecture ON Aid=ADEaid ";
	$select.= "WHERE (ADEappearedin <= '$ver' and ADEappearedin<>'') ";
	$select.= "AND (ADEwithdrawnin IS NULL OR ADEwithdrawnin > '$ver') ";
	$select.= "ORDER BY DEname,Aid ";
	
	#print $select;
	
	$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
	$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
	
	$suffix = "_LSB$ver";
	$suffix =~ s/\.//g;
	print "struct DynamicInfo DynamicInfo".$suffix."[] = {\n";
	for (1..$sth->rows) {
		$entry = $sth->fetchrow_hashref or die "Fetchrow failed on $select query: ".DBI->errstr;
		
		if (not $entry->{'Aname'}) {
			next;
		}
		
		if ($entry->{'Aname'} ne "All") {
			print "#if ".$entry->{'Asymbol'}."\n";
		}
		printf "\t{\"%s\",",$entry->{'DEname'};
		printf "%s,",$entry->{'DEname'};
		printf "check%s},\n",$entry->{'DEname'};
		if ($entry->{'Aname'} ne "All") {
			print "#endif /* ".$entry->{'Asymbol'}." */\n";
		}
	}
	print "};\n\n";
	print "int numDynamicInfo$suffix = sizeof(DynamicInfo$suffix)/sizeof(struct DynamicInfo);\n\n";
	
	$sth->finish;
}

print "struct DynamicInfo* DynamicInfo[] = {DynamicInfo_LSB".join(", DynamicInfo_LSB", @lsbvernames)."};\n";
print "int numDynamicInfo[] = {sizeof(DynamicInfo_LSB".join(")/sizeof(struct DynamicInfo), sizeof(DynamicInfo_LSB", @lsbvernames).")/sizeof(struct DynamicInfo)};\n\n";

# generate a function which will give readable tag name by its value
# (for all tags, not only for LSB ones)

print "const char *\n";
print "get_tag_name (u_long dt_value)\n{\n";
print "switch (dt_value) {\n";

$select = "SELECT GROUP_CONCAT(RDEname SEPARATOR ' or ') AS RDEname, RDEvalue FROM RawDynamicEntries ";
$select.= "WHERE RDEvalue != '0' OR RDEname='DT_NULL' ";
$select.= "GROUP BY RDEvalue ";
$select.= "ORDER BY CAST(RDEvalue AS SIGNED)";

$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

for (1..$sth->rows) {
    $entry = $sth->fetchrow_hashref or die "Fetchrow failed on $select query: ".DBI->errstr;
    print "case ".$entry->{'RDEvalue'}.": return \"".$entry->{'RDEname'}."\";\n";
}

print "default: return \"can't guess tag name\";\n";
print "}\n}\n";

$sth->finish;

$dbh->disconnect;


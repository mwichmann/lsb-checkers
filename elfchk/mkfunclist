#!/usr/bin/perl

use CGI;
use DBI;
use Getopt::Long;

sub usage()
{
print STDERR "Usage: mkfunclist -v <lsbversion(s)>\n";
print STDERR "    LSB versions should be comma-separated.\n";
die;
}

GetOptions("v=s" => \$lsbversion);
if( !$lsbversion ) { usage(); }

use Env qw(LSBUSER LSBDBPASSWD LSBDB LSBDBHOST);

my $dbh = DBI->connect('DBI:mysql:database='.$LSBDB.';host='.$LSBDBHOST, $LSBUSER, $LSBDBPASSWD)
    or die "Couldn't connect to database: ".DBI->errstr;

$newerVersion_Q = $dbh->prepare("SELECT AIint FROM ArchInt WHERE AIint= ?  AND AIarch = ? AND AIappearedin > ? AND AIappearedin < ?")
    or die "Couldn't prepare 'newerVersion' query: ".DBI->errstr;

$nonGeneric_Q = $dbh->prepare("SELECT AIarch FROM ArchInt WHERE AIint = ?  AND AIarch > 1 LIMIT 1 ")
     or die "Couldn't prepare 'nonGeneric' query: ".DBI->errstr;

print "/* Generated file - Do Not Edit */\n";
print "#include \"elfchk.h\"\n\n";

@lsbversions = sort split(/,/, $lsbversion);
$ver_max = 0;
$ver_min = "5.0"; # Set to some high value
@lsbvernames = @lsbversions;
for ($i = 0; $i <= $#lsbvernames; $i++) {
    $lsbvernames[$i] =~ s/\.//g;
    if ($lsbversions[$i] > $ver_max) {
        $ver_max = $lsbversions[$i];
    }
    if ($lsbversions[$i] < $ver_min) {
        $ver_min = $lsbversions[$i];
    }
}

my %deprecated_submodules;
my %deprecated_libs;

# Create lists of deprecated entries
$select = "SELECT SMname, SMdeprecatedsince FROM SubModule WHERE SMdeprecatedsince > ''";
$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
for (1..$sth->rows) {
    $entry = $sth->fetchrow_hashref or die "Fetchrow failed on $select query: ".DBI->errstr;
    $deprecated_submodules{$entry->{'SMname'}} = $entry->{'SMdeprecatedsince'};
}

$select = "SELECT Lid, Ldeprecatedsince FROM Library WHERE Ldeprecatedsince > ''";
$sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
$sth->execute or die "Couldn't execute $select query: ".DBI->errstr;
for (1..$sth->rows) {
    $entry = $sth->fetchrow_hashref or die "Fetchrow failed on $select query: ".DBI->errstr;
    $deprecated_libs{$entry->{'Lid'}} = $entry->{'Ldeprecatedsince'};
}

sub createTmpTable()
{
    $create = "CREATE TEMPORARY TABLE tmp_IncludedLibGroups "
        . "(KEY `LGid`(`LGid`)) "
        . "SELECT DISTINCT LGid, Lid, SMname FROM Library "
        . "LEFT JOIN LibGroup ON LGlib=Lid "
        . "LEFT JOIN ArchLib ON ALlid=Lid "
        . "LEFT JOIN SModLib ON SMLlid=Lid "
        . "LEFT JOIN SubModule ON SMLsmid=SMid "
        . "WHERE ALappearedin <= '$ver_max' AND ALappearedin > '' "
        . "AND (ALwithdrawnin IS NULL OR ALwithdrawnin > '$ver_min') "
        . "AND SMLappearedin <= '$ver_max' AND SMLappearedin > '' "
        . "AND (SMLwithdrawnin IS NULL OR SMLwithdrawnin > '$ver_min') ";
    $sth = $dbh->prepare($create) || die $dbh->errstr;
    $sth->execute() || die $sth->errstr;
}

#foreach $ver (@lsbversions) {
    createTmpTable();
    $select = "SELECT Iid,Iname,AIdeprecatedsince,AIappearedin,AIwithdrawnin,Vname,Asymbol,Aname,Aid,SMname,Lid FROM tmp_IncludedLibGroups ";
    $select.= "LEFT JOIN LGInt ON LGIlibg=LGid ";
    $select.= "LEFT JOIN Interface ON Iid=LGIint ";
    $select.= "LEFT JOIN ArchInt ON Iid=AIint ";
    $select.= "LEFT JOIN Architecture ON Aid=AIarch ";
    $select.= "LEFT JOIN Version ON Vid=AIversion ";
    $select.= "WHERE AIappearedin <= '$ver_max' AND AIappearedin > '' ";
    $select.= "AND (AIwithdrawnin IS NULL OR AIwithdrawnin > '$ver_min') ";
    $select.= "ORDER BY Iname,Aname,SMname,Vname DESC ";

    $sth = $dbh->prepare($select) or die "Couldn't prepare $select query: ".DBI->errstr;
    $sth->execute or die "Couldn't execute $select query: ".DBI->errstr;

    my %processed;

    print "struct versym DynSyms_LSB[] = {\n";
    for (1..$sth->rows) {
        $entry = $sth->fetchrow_hashref or die "Fetchrow failed on $select query: ".DBI->errstr;

#        if ($entry->{'AIwithdrawnin'}) {
            # Let's check if there is an interface with newer version
#            $newerVersion_Q->execute( $entry->{'Iid'}, $entry->{'Aid'},
#                          $entry->{'AIappearedin'}, $entry->{'AIwithdrawnin'} )
#            or die "Couldn't execute 'newerVersion' query: ".DBI->errstr;

#        if ($newerVersion_Q->rows) {
#                next;
#            }
#        }

        # There can be several entries in the Interface table with the same name in the same module
        # (e.g. for Qt4 the same vtables in different libs)- skip them
        if ($processed{ ($entry->{'Aname'},$entry->{'Iname'},$entry->{'Vname'},$entry->{'SMname'}) }) {
            next;
        }
        $processed{ ($entry->{'Aname'},$entry->{'Iname'},$entry->{'Vname'},$entry->{'SMname'}) } = 1;

        if ($entry->{'Aname'} && $entry->{'Aname'} ne "All") {
            print "#if $entry->{'Asymbol'}\n";
        }
        elsif ($entry->{'Aname'} && $entry->{'Aname'} eq "All") {
            $nonGeneric_Q->execute($entry->{'Iid'}) or die "Couldn't execute 'nonGeneric' query: ".DBI->errstr;

            # Some architecture specific records found - don't check generic information
            if ($nonGeneric_Q->rows) {
                next;
            }
        }
        printf "\t{\"%s\",\"%s\",",$entry->{'Iname'},$entry->{'Vname'};
        if ($entry->{'AIdeprecatedsince'}) {
            print $entry->{'AIdeprecatedsince'};
        } elsif (defined $deprecated_submodules{$entry->{'SMname'}}) {
            print $deprecated_submodules{$entry->{'SMname'}};
        } elsif ($deprecated_libs{$entry->{'Lid'}}) {
            print $deprecated_libs{$entry->{'Lid'}};
        } else {
            print "0";
        }

        print ",".$entry->{'SMname'};
        print ",0,0"; # Dummy values for size and type, not used in elfchk
        print ",".$entry->{'AIappearedin'};
        $withdrawnin = $entry->{'AIwithdrawnin'} ? $entry->{'AIwithdrawnin'} : $ver_max + 1;
        print ",".$withdrawnin;
        print "},\n";
        if ($entry->{'Aname'} && $entry->{'Aname'} ne "All") {
            print "#endif\n";
        }
    }
    print "};\n\n";
#    print "int numDynSyms = sizeof(DynSyms)/sizeof(struct versym);\n\n";

    $sth->finish;
#}

print "struct versym* DynSyms[] = {DynSyms_LSB};\n";
print "int numDynSyms[] = {sizeof(DynSyms_LSB)/sizeof(struct versym)};\n";

$newerVersion_Q->finish();
$nonGeneric_Q->finish();
$dbh->disconnect;

